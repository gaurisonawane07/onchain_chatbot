/* This JS runs inside each DON node.
 * It uses your GEMINI_API_KEY secret to get responses from Gemini AI.
 */

// The user's query passed from your smart contract
const [userQuery] = args;

// Accessing the uploaded secret
const GEMINI_API_KEY = secrets.GEMINI_API_KEY;

// --- Input Validation ---
if (!userQuery) {
  throw Error("User query is missing. Please provide a query in your smart contract call.");
}

if (!GEMINI_API_KEY) {
  throw Error("GEMINI_API_KEY secret is not set in Chainlink Functions. Ensure it's uploaded and correct.");
}

// Correct Gemini API endpoint (Gemini 1.5 Flash model)
const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";

const headers = {
  "Content-Type": "application/json",
  "x-goog-api-key": GEMINI_API_KEY,
};

const postData = {
  contents: [
    {
      parts: [
        {
          text: userQuery,
        },
      ],
    },
  ],
};

console.log(`DEBUG: functions-source.js starting...`);
console.log(`DEBUG: Sending query to Gemini AI: "${userQuery}"`);
console.log(`DEBUG: Using API Key (first 5 chars): ${GEMINI_API_KEY ? GEMINI_API_KEY.substring(0, 5) + '...' : 'undefined'}`);
console.log(`DEBUG: Request URL: ${url}`);
console.log(`DEBUG: Request Headers (partial): ${JSON.stringify({"Content-Type": headers["Content-Type"], "x-goog-api-key": "..."})}`);
console.log(`DEBUG: Request Data: ${JSON.stringify(postData)}`);

let response;
try {
  response = await Functions.makeHttpRequest({
    url: url,
    method: "POST",
    headers: headers,
    data: postData,
    timeout: 15000,
  });
  console.log("DEBUG: Functions.makeHttpRequest completed. Raw response object:", JSON.stringify(response));
} catch (error) {
  console.error(`ERROR: HTTP request failed before receiving a response: ${error.message || error}`);
  throw Error(`Failed to make HTTP request to Gemini AI: ${error.message || error}`);
}

// --- Response Validation & Detailed Error Handling ---

if (!response) {
  throw Error("Empty response object received from Gemini AI. This should not happen after makeHttpRequest returns.");
}

// Check HTTP status code for errors
if (response.status && (response.status < 200 || response.status >= 300)) {
  const errorStatus = response.status;
  const errorStatusText = response.statusText || "Unknown Status Text";
  const errorBody = response.data ? JSON.stringify(response.data) : "No response data available";

  console.error(`ERROR: Gemini AI HTTP Status Error: ${errorStatus} - ${errorStatusText}`);
  console.error(`ERROR: Gemini AI Error Response Body: ${errorBody}`);

  throw Error(`Gemini AI API HTTP error: ${errorStatus} - ${errorStatusText}. Details: ${errorBody}`);
}

// Check for specific Gemini API errors within the data payload
if (response.data && response.data.error) {
    const apiError = response.data.error;
    const errorMessage = apiError.message || JSON.stringify(apiError);
    const errorCode = apiError.code || "N/A";

    console.error(`ERROR: Gemini API returned a structured error: Code ${errorCode}, Message: ${errorMessage}`);
    console.error(`ERROR: Full Gemini API Error Object: ${JSON.stringify(apiError)}`);
    throw Error(`Gemini API structured error: ${errorMessage} (Code: ${errorCode})`);
}

// Fallback check if response.error is true
if (response.error) {
  console.error(`ERROR: Functions.makeHttpRequest 'error' flag is true. This indicates an internal issue with the HTTP request.`);
  console.error(`ERROR: Full response object for 'error: true': ${JSON.stringify(response)}`);
  throw Error(`Gemini AI API call failed (internal flag). Details: ${JSON.stringify(response.error)}`);
}

if (!response.data) {
  throw Error("No 'data' field in the successful response from Google Gemini AI. This is unexpected for a successful call.");
}

// Extract the generated text from the Gemini response
let generatedText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;

if (!generatedText) {
  console.error(`ERROR: No text generated by Google Gemini AI. Full response data: ${JSON.stringify(response.data)}`);
  throw Error("No text generated by Google Gemini AI. Check Gemini API response structure or query effectiveness.");
}

// --- CRITICAL FIX: Use TextEncoder for Deno-compatible byte length calculation ---
const MAX_BYTES_RETURN = 256;
const encoder = new TextEncoder(); // Initialize TextEncoder

if (encoder.encode(generatedText).length > MAX_BYTES_RETURN) {
    console.warn(`WARNING: Gemini response (${encoder.encode(generatedText).length} bytes) exceeds ${MAX_BYTES_RETURN} bytes. Truncating.`);
    let truncatedText = generatedText;
    // Iterate and shorten until byte length is within limits
    while (encoder.encode(truncatedText).length > MAX_BYTES_RETURN - 3) { // Reserve 3 bytes for ellipsis "..."
        truncatedText = truncatedText.slice(0, -1); // Remove last character
    }
    generatedText = truncatedText + "...";
    console.log(`DEBUG: Truncated response to (${encoder.encode(generatedText).length} bytes): "${generatedText}"`);
}

console.log(`DEBUG: Gemini AI response: "${generatedText}"`);
console.log(`DEBUG: functions-source.js completed successfully.`);

// Encode and return the generated text as a string
return Functions.encodeString(generatedText);
